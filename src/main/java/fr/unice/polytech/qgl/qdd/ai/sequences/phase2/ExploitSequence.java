package fr.unice.polytech.qgl.qdd.ai.sequences.phase2;

import fr.unice.polytech.qgl.qdd.Action;
import fr.unice.polytech.qgl.qdd.ai.CheckList;
import fr.unice.polytech.qgl.qdd.ai.sequences.Sequence;
import fr.unice.polytech.qgl.qdd.enums.Resource;
import fr.unice.polytech.qgl.qdd.navigation.Navigator;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Created by Hakim on 12/13/2015.
 */
public class ExploitSequence extends Sequence {
    private Map<Resource, Integer> contractedResources;
    private Map<Resource, Integer> collectedResources;

    public ExploitSequence(Navigator nav, CheckList checkList, Map<Resource, Integer> contractedResources,
                           Map<Resource, Integer> collectedResources) {
        super(nav, checkList);
        this.contractedResources = contractedResources;
        this.collectedResources = collectedResources;
    }

    @Override
    public Action execute() { return exploit(selectResourcesToExploit()); }

    @Override
    public boolean completed() {
        return !checkList.exploitableResourceFound();
    }

    private List<Resource> selectResourcesToExploit() {
        List<Resource> availableResources = new ArrayList<>();

        nav.map().currentTile().getResources().keySet().stream()
                .filter(resource -> checkList.getResourcesToCollect().contains(resource))
                .forEach(contractedResource -> availableResources.add(contractedResource));

        return availableResources;
    }
}
